Start: 2019-07-16 00:14:19.480660
End: 2019-07-16 00:18:48.098285
Diff: 268.617625
Wrote profile results to scratch.py.lprof
Timer unit: 1e-06 s

Total time: 268.599 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/cli.py
Function: crunch_files at line 163

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   163                                               @profile
   164                                               def crunch_files(fnames, dpath):
   165         5     450665.0  90133.0      0.2          scmcube = _load_scm_cube(drs, dpath, fnames)
   166                                           
   167         5         38.0      7.6      0.0          out_filename = separator.join([output_prefix, scmcube.get_data_filename()])
   168                                           
   169         5        144.0     28.8      0.0          outfile_dir = scmcube.get_data_directory().replace(scmcube.root_dir, out_dir)
   170         5         40.0      8.0      0.0          out_filepath = os.path.join(outfile_dir, out_filename)
   171                                           
   172         5        156.0     31.2      0.0          _make_path_if_not_exists(outfile_dir)
   173                                           
   174         5          6.0      1.2      0.0          if not force and tracker.contains_file(out_filepath):
   175                                                       logger.info("Skipped (already exists, not overwriting) %s", out_filepath)
   176                                                       return
   177                                           
   178         5          6.0      1.2      0.0          results = scmcube.get_scm_timeseries_cubes(
   179         5  267676350.0 53535270.0     99.7              land_mask_threshold=land_mask_threshold
   180                                                   )
   181         5        194.0     38.8      0.0          results = _set_crunch_contact_in_results(results, crunch_contact)
   182                                           
   183         5       5504.0   1100.8      0.0          tracker.register(out_filepath, scmcube.info)
   184         5       1619.0    323.8      0.0          logger.info("Writing file to %s", out_filepath)
   185         5     463951.0  92790.2      0.2          save_netcdf_scm_nc(results, out_filepath)

Total time: 267.676 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_timeseries_cubes at line 601

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   601                                               @profile
   602                                               def get_scm_timeseries_cubes(
   603                                                   self,
   604                                                   sftlf_cube=None,
   605                                                   land_mask_threshold=50,
   606                                                   areacella_scmcube=None,
   607                                                   masks=None,
   608                                               ):
   609                                                   """
   610                                                   Get SCM relevant cubes
   611                                           
   612                                                   If global, Northern Hemisphere and Southern Hemisphere land cubes are
   613                                                   calculated, then three auxillary co-ordinates are also added to each cube:
   614                                                   ``land_fraction``, ``land_fraction_northern_hemisphere`` and
   615                                                   ``land_fraction_southern_hemisphere``. These co-ordinates document the area
   616                                                   fraction that was considered to be land when the cubes were crunched i.e.
   617                                                   ``land_fraction`` is the fraction of the entire globe which was considered to
   618                                                   be land, ``land_fraction_northern_hemisphere`` is the fraction of the Northern
   619                                                   Hemisphere which was considered to be land and
   620                                                   ``land_fraction_southern_hemisphere`` is the fraction of the Southern
   621                                                   Hemisphere which was considered to be land.
   622                                           
   623                                                   Parameters
   624                                                   ----------
   625                                                   sftlf_cube : :obj:`SCMCube`, optional
   626                                                       land surface fraction data which is used to determine whether a given
   627                                                       gridbox is land or ocean. If ``None``, we try to load the land surface fraction automatically.
   628                                           
   629                                                   land_mask_threshold : float, optional
   630                                                       if the surface land fraction in a grid box is greater than
   631                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   632                                           
   633                                                   areacella_scmcube : :obj:`SCMCube`, optional
   634                                                       cell area data which is used to take the latitude-longitude mean of the
   635                                                       cube's data. If ``None``, we try to load this data automatically and if
   636                                                       that fails we fall back onto ``iris.analysis.cartography.area_weights``.
   637                                           
   638                                                   masks : list[str]
   639                                                       List of masks to use. If ``None`` then ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   640                                           
   641                                                   Returns
   642                                                   -------
   643                                                   dict
   644                                                       Cubes, with latitude-longitude mean data as appropriate for each of the
   645                                                       SCM relevant regions.
   646                                                   """
   647         5          4.0      0.8      0.0          try:
   648                                                       # Check if two copies of data will fit in memory. If not, everything has
   649                                                       # to be done lazily.
   650         5   13830520.0 2766104.0      5.2              self._make_two_copies_of_data()
   651                                                   except MemoryError:
   652                                                       logger.warning(
   653                                                           "Data won't fit in memory, will process lazily (hence slowly)"
   654                                                       )
   655                                                       data_dir = dirname(self.info["files"][0])
   656                                                       self.__init__()
   657                                                       self.load_data_in_directory(data_dir)
   658                                           
   659         5         27.0      5.4      0.0          masks = masks if masks is not None else DEFAULT_REGIONS
   660         5      24926.0   4985.2      0.0          area_weights = self._get_area_weights(areacella_scmcube=areacella_scmcube)
   661                                           
   662         5          9.0      1.8      0.0          timeseries_cubes = {}
   663         5          4.0      0.8      0.0          areas = {}
   664        50         69.0      1.4      0.0          for m in masks:
   665        45         79.0      1.8      0.0              scm_cube = self.get_scm_cubes(
   666        45         33.0      0.7      0.0                  sftlf_cube=sftlf_cube,
   667        45         42.0      0.9      0.0                  land_mask_threshold=land_mask_threshold,
   668        45    4618031.0 102622.9      1.7                  masks=[m],
   669        45        661.0     14.7      0.0              )[m]
   670                                           
   671        45         77.0      1.7      0.0              if m in _LAND_FRACTION_REGIONS:
   672        30      14969.0    499.0      0.0                  areas[m] = self._get_area(scm_cube, area_weights)
   673                                           
   674        45  249159857.0 5536885.7     93.1              timeseries_cubes[m] = take_lat_lon_mean(scm_cube, area_weights)
   675                                           
   676         5      26290.0   5258.0      0.0          timeseries_cubes = self._add_land_fraction(timeseries_cubes, areas)
   677         5          8.0      1.6      0.0          return timeseries_cubes

Total time: 13.8303 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _make_two_copies_of_data at line 679

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   679                                               @profile
   680                                               def _make_two_copies_of_data(self):
   681         5   11333434.0 2266686.8     81.9          self._ensure_data_realised()
   682         5    2496913.0 499382.6     18.1          np.copy(self.cube.data)  # pylint:disable=pointless-statement

Total time: 4.61471 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_cubes at line 727

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   727                                               @profile
   728                                               def get_scm_cubes(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   729                                                   """
   730                                                   Get SCM relevant cubes from the ``self``.
   731                                           
   732                                                   Each cube comes with extra information in its ``attributes`` property. The
   733                                                   extra information comprises of crunching information (e.g. the
   734                                                   land_mask_treshold, netcdf_scm_version and source files used to generate the
   735                                                   cube) and SCM timeseries metadata (e.g. scenario, climate_model,
   736                                                   standard_variable_name).
   737                                           
   738                                                   In particular, the timeseries'
   739                                                   `CMOR name <https://www.earthsystemcog.org/projects/wip/CMIP6DataRequest>`_
   740                                                   (see `here <http://clipc-services.ceda.ac.uk/dreq/mipVars.html>`_ for more
   741                                                   details) is put in the ``variable`` attribute whilst the timeseries` 'standard name' (see
   742                                                   `CF documentation <http://cfconventions.org/Data/cf-standard-names/66/build/cf-standard-name-table.html>`_
   743                                                   ) is put in the ``variable_standard_name`` attribute.
   744                                           
   745                                                   Parameters
   746                                                   ----------
   747                                                   sftlf_cube : :obj:`SCMCube`, optional
   748                                                       Land surface fraction data which is used to determine whether a given
   749                                                       gridbox is land or ocean. If ``None``, we try to load the land surface fraction automatically.
   750                                           
   751                                                   land_mask_threshold : float, optional
   752                                                       If the surface land fraction in a grid box is greater than
   753                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   754                                           
   755                                                   masks : list[str]
   756                                                       List of masks to use. If ``None`` then ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   757                                           
   758                                                   Returns
   759                                                   -------
   760                                                   dict
   761                                                       Cubes, with data masked as appropriate for each of the SCM relevant
   762                                                       regions.
   763                                                   """
   764        45        113.0      2.5      0.0          scm_masks = self._get_scm_masks(
   765        45    4500176.0 100003.9     97.5              sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold, masks=masks
   766                                                   )
   767                                                   # ensure data is realised so it's not read multiple times while applying
   768                                                   # masks
   769        45        471.0     10.5      0.0          self._ensure_data_realised()
   770                                           
   771        45     109297.0   2428.8      2.4          cubes = {k: apply_mask(self, mask) for k, mask in scm_masks.items()}
   772                                                   has_root_dir = (
   773        45        130.0      2.9      0.0              hasattr(self, "root_dir")  # pylint:disable=no-member
   774        45         90.0      2.0      0.0              and self.root_dir is not None  # pylint:disable=no-member
   775                                                   )
   776        45         81.0      1.8      0.0          if has_root_dir:
   777        45         97.0      2.2      0.0              source_file_info = "Files: {}".format(
   778                                                           [
   779        45         95.0      2.1      0.0                      p.replace(self.root_dir, "")  # pylint:disable=no-member
   780        45        979.0     21.8      0.0                      for p in self.info["files"]
   781                                                           ]
   782                                                       )
   783                                                   else:
   784                                                       source_file_info = "Files: {}".format(
   785                                                           [basename(p) for p in self.info["files"]]
   786                                                       )
   787        45        176.0      3.9      0.0          if "metadata" in self.info:
   788                                                       source_meta = {}
   789                                                       for k, v in self.info["metadata"].items():
   790                                                           if has_root_dir:
   791                                                               source_meta[k] = [
   792                                                                   "{}".format(
   793                                                                       p.replace(self.root_dir, "")  # pylint:disable=no-member
   794                                                                   )
   795                                                                   for p in v["files"]
   796                                                               ]
   797                                                           else:
   798                                                               source_meta[k] = ["{}".format(basename(p)) for p in v["files"]]
   799                                                       source_file_info = "; ".join(
   800                                                           [source_file_info]
   801                                                           + ["{}: {}".format(k, v) for k, v in source_meta.items()]
   802                                                       )
   803                                           
   804        90        236.0      2.6      0.0          for region, c in cubes.items():
   805        45        239.0      5.3      0.0              c.cube.attributes["crunch_land_mask_threshold"] = land_mask_threshold
   806                                                       c.cube.attributes[
   807                                                           "crunch_netcdf_scm_version"
   808        45        275.0      6.1      0.0              ] = "{} (more info at github.com/znicholls/netcdf-scm)".format(__version__)
   809        45        171.0      3.8      0.0              c.cube.attributes["crunch_source_files"] = source_file_info
   810        45        174.0      3.9      0.0              c.cube.attributes["region"] = region
   811        45       1828.0     40.6      0.0              c.cube.attributes.update(self._get_scm_timeseries_ids())
   812                                           
   813        45         86.0      1.9      0.0          return cubes

Total time: 4.49946 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _get_scm_masks at line 815

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   815                                               @profile
   816                                               def _get_scm_masks(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   817                                                   """
   818                                                   Get the scm masks.
   819                                           
   820                                                   Returns
   821                                                   -------
   822                                                   dict
   823                                                       Dictionary of region name-mask key-value pairs
   824                                                   """
   825        45         74.0      1.6      0.0          if self._masker is None:
   826         5          3.0      0.6      0.0              self._masker = CubeMasker(
   827         5         33.0      6.6      0.0                  self, sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold
   828                                                       )
   829        45         34.0      0.8      0.0          masks = masks if masks is not None else DEFAULT_REGIONS
   830        45    4499319.0  99984.9    100.0          return self._masker.get_masks(masks)

Total time: 0.01498 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_metadata_cube at line 1172

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1172                                               @profile
  1173                                               def get_metadata_cube(self, metadata_variable, cube=None):
  1174                                                   """
  1175                                                   Load a metadata cube from self's attributes.
  1176                                           
  1177                                                   Parameters
  1178                                                   ----------
  1179                                                   metadata_variable : str
  1180                                                       the name of the metadata variable to get, as it appears in the filename.
  1181                                           
  1182                                                   cube : :obj:`SCMCube`
  1183                                                       Optionally, pass in an already loaded metadata cube to link it to currently loaded cube
  1184                                           
  1185                                                   Returns
  1186                                                   -------
  1187                                                   type(self)
  1188                                                       instance of self which has been loaded from the file containing the metadata variable of interest.
  1189                                           
  1190                                                   Raises
  1191                                                   ------
  1192                                                   TypeError
  1193                                                       ``cube`` is not an :obj:`ScmCube`
  1194                                                   """
  1195        15         26.0      1.7      0.2          if cube is not None:
  1196                                                       return super().get_metadata_cube(metadata_variable, cube=cube)
  1197        15         23.0      1.5      0.2          if metadata_variable not in self._metadata_cubes:
  1198        15        180.0     12.0      1.2              load_args = self._get_metadata_load_arguments(metadata_variable)
  1199                                           
  1200        15         88.0      5.9      0.6              cube = type(self)()
  1201        15         72.0      4.8      0.5              cube._metadata_cubes = {k: v for k, v in self._metadata_cubes.items() if k != metadata_variable}
  1202        15      14591.0    972.7     97.4              cube.load_data_from_identifiers(**load_args)
  1203                                           
  1204                                                       return super().get_metadata_cube(metadata_variable, cube=cube)
  1205                                                   return super().get_metadata_cube(metadata_variable)

Total time: 0.126238 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/masks/__init__.py
Function: get_land_mask at line 117

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   117                                           @profile
   118                                           def get_land_mask(  # pylint:disable=unused-argument
   119                                               masker, cube, sftlf_cube=None, land_mask_threshold=50, **kwargs
   120                                           ):
   121                                               """
   122                                               Get the land mask
   123                                           
   124                                               Parameters
   125                                               ----------
   126                                               masker : :obj:`CubeMasker`
   127                                                   Cube masker from which to retrieve the mask
   128                                           
   129                                               cube : :obj:`SCMCube`
   130                                                   Cube to create a mask for
   131                                           
   132                                               sftlf_cube : :obj:`SCMCube`
   133                                                   Cube containing the surface land-fraction data
   134                                           
   135                                               land_mask_threshold : float
   136                                                   Threshold for determining whether a cell is land or not. If the surface
   137                                                   land-fraction > land_mask_threshold, the cell is land.
   138                                           
   139                                               kwargs : Any
   140                                                   Ignored (required for compatibility with ``CubeMasker``)
   141                                           
   142                                               Returns
   143                                               -------
   144                                               np.ndarray
   145                                                   Land mask
   146                                               """
   147         5         10.0      2.0      0.0      sftlf_data = None
   148         5          3.0      0.6      0.0      try:
   149         5       5474.0   1094.8      4.3          sftlf_cube = cube.get_metadata_cube(cube.sftlf_var, cube=sftlf_cube)
   150                                                   sftlf_data = sftlf_cube.cube.data
   151         5          9.0      1.8      0.0      except OSError:
   152         5          4.0      0.8      0.0          warn_msg = "Land surface fraction (sftlf) data not available, using default instead"
   153         5       1581.0    316.2      1.3          logger.warning(warn_msg)
   154         5      26076.0   5215.2     20.7          def_cube_regridded = get_default_sftlf_cube().regrid(
   155         5      89103.0  17820.6     70.6              cube.cube, iris.analysis.Linear()
   156                                                   )
   157         5         68.0     13.6      0.1          sftlf_data = def_cube_regridded.data
   158                                           
   159         5          5.0      1.0      0.0      land_mask = np.where(
   160         5       1456.0    291.2      1.2          sftlf_data > land_mask_threshold,
   161         5          6.0      1.2      0.0          False,  # where it's land, return False i.e. don't mask
   162         5        375.0     75.0      0.3          True,  # otherwise True
   163                                               )
   164                                           
   165         5         10.0      2.0      0.0      masker._masks["World|Land"] = land_mask
   166         5       2058.0    411.6      1.6      return broadcast_onto_lat_lon_grid(cube, land_mask)

Total time: 0.185317 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/masks/__init__.py
Function: get_mask at line 367

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   367                                               @profile
   368                                               def get_mask(self, mask_name):
   369                                                   """
   370                                                   Get a single mask
   371                                           
   372                                                   If the mask has previously been calculated the precalculated result is
   373                                                   returned from the cache. Otherwise the appropriate MaskFunc is called with any
   374                                                   kwargs specified in the constructor.
   375                                           
   376                                                   Parameters
   377                                                   ----------
   378                                                   mask_name : str
   379                                           
   380                                                   Raises
   381                                                   ------
   382                                                   InvalidMask
   383                                                       If the requested mask cannot be found or evaluated.
   384                                           
   385                                                   Returns
   386                                                   -------
   387                                                   ndarray[bool]
   388                                                       Any True values should be masked out and excluded from any further calculation.
   389                                                   """
   390       100         78.0      0.8      0.0          try:
   391       100        237.0      2.4      0.1              return self._masks[mask_name]
   392        45         52.0      1.2      0.0          except KeyError:
   393        45         20.0      0.4      0.0              try:
   394        45         66.0      1.5      0.0                  mask_func = MASKS[mask_name]
   395        45     184426.0   4098.4     99.5                  mask = mask_func(self, self.cube, **self.kwargs)
   396        45        398.0      8.8      0.2                  self._masks[mask_name] = mask
   397                                                       except KeyError:
   398                                                           raise InvalidMask("Unknown mask: {}".format(mask_name))
   399                                           
   400        45         40.0      0.9      0.0          return mask

Total time: 249.159 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/utils.py
Function: take_lat_lon_mean at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def take_lat_lon_mean(in_scmcube, in_weights):
    98                                               """
    99                                               Take the latitude longitude mean of a cube with given weights
   100                                           
   101                                               Parameters
   102                                               ----------
   103                                               in_scmcube : :obj:`SCMCube`
   104                                                   An ``SCMCube`` instance.
   105                                           
   106                                               in_weights : np.ndarray
   107                                                   Weights to use when taking the mean. If you don't have another source, these
   108                                                   can be generated using
   109                                                   ``iris.analysis.cartography.area_weights(iris_cube_instance)``
   110                                           
   111                                               Returns
   112                                               -------
   113                                               :obj:`SCMCube`
   114                                                   A copy of the input cube in which the data is now the latitude-longitude mean
   115                                                   of the input cube's data
   116                                               """
   117        45        145.0      3.2      0.0      out_cube = type(in_scmcube)()
   118        45         65.0      1.4      0.0      out_cube.cube = in_scmcube.cube.collapsed(
   119        45         56.0      1.2      0.0          [in_scmcube.lat_name, in_scmcube.lon_name],
   120        45         82.0      1.8      0.0          iris.analysis.MEAN,
   121        45  249158272.0 5536850.5    100.0          weights=in_weights,
   122                                               )
   123        45        138.0      3.1      0.0      return out_cube

Total time: 0.108233 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/utils.py
Function: apply_mask at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                           @profile
   126                                           def apply_mask(in_scmcube, in_mask):
   127                                               """
   128                                               Apply a mask to an scm cube's data
   129                                           
   130                                               Parameters
   131                                               ----------
   132                                               in_scmcube : :obj:`SCMCube`
   133                                                   An ``SCMCube`` instance.
   134                                           
   135                                               in_mask : np.ndarray
   136                                                   The mask to apply
   137                                           
   138                                               Returns
   139                                               -------
   140                                               :obj:`SCMCube`
   141                                                   A copy of the input cube with the mask applied to its data
   142                                               """
   143        45        341.0      7.6      0.3      out_cube = type(in_scmcube)()
   144        45         82.0      1.8      0.1      if in_scmcube.cube.has_lazy_data():
   145                                                   new_data = da.ma.masked_array(data=in_scmcube.cube.lazy_data(), mask=in_mask)
   146                                               else:
   147        45       6905.0    153.4      6.4          new_data = ma.masked_array(in_scmcube.cube.data, mask=in_mask)
   148        45     100844.0   2241.0     93.2      out_cube.cube = in_scmcube.cube.copy(data=new_data)
   149                                           
   150        45         61.0      1.4      0.1      return out_cube

