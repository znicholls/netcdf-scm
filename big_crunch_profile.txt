Start: 2019-07-15 21:41:04.449607
End: 2019-07-15 21:44:55.197258
Diff: 230.747651
Wrote profile results to scratch.py.lprof
Timer unit: 1e-06 s

Total time: 230.695 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/cli.py
Function: crunch_files at line 163

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   163                                               @profile
   164                                               def crunch_files(fnames, dpath):
   165         5     453276.0  90655.2      0.2          scmcube = _load_scm_cube(drs, dpath, fnames)
   166                                           
   167         5         46.0      9.2      0.0          out_filename = separator.join([output_prefix, scmcube.get_data_filename()])
   168                                           
   169         5        148.0     29.6      0.0          outfile_dir = scmcube.get_data_directory().replace(scmcube.root_dir, out_dir)
   170         5         37.0      7.4      0.0          out_filepath = os.path.join(outfile_dir, out_filename)
   171                                           
   172         5        124.0     24.8      0.0          _make_path_if_not_exists(outfile_dir)
   173                                           
   174         5          5.0      1.0      0.0          if not force and tracker.contains_file(out_filepath):
   175                                                       logger.info("Skipped (already exists, not overwriting) %s", out_filepath)
   176                                                       return
   177                                           
   178         5          6.0      1.2      0.0          results = scmcube.get_scm_timeseries_cubes(
   179         5  229707861.0 45941572.2     99.6              land_mask_threshold=land_mask_threshold
   180                                                   )
   181         5        211.0     42.2      0.0          results = _set_crunch_contact_in_results(results, crunch_contact)
   182                                           
   183         5      67692.0  13538.4      0.0          tracker.register(out_filepath, scmcube.info)
   184         5       5503.0   1100.6      0.0          logger.info("Writing file to %s", out_filepath)
   185         5     459601.0  91920.2      0.2          save_netcdf_scm_nc(results, out_filepath)

Total time: 229.703 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_timeseries_cubes at line 598

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   598                                               @profile
   599                                               def get_scm_timeseries_cubes(
   600                                                   self,
   601                                                   sftlf_cube=None,
   602                                                   land_mask_threshold=50,
   603                                                   areacella_scmcube=None,
   604                                                   masks=None,
   605                                               ):
   606                                                   """
   607                                                   Get SCM relevant cubes
   608                                           
   609                                                   If global, Northern Hemisphere and Southern Hemisphere land cubes are
   610                                                   calculated, then three auxillary co-ordinates are also added to each cube:
   611                                                   ``land_fraction``, ``land_fraction_northern_hemisphere`` and
   612                                                   ``land_fraction_southern_hemisphere``. These co-ordinates document the area
   613                                                   fraction that was considered to be land when the cubes were crunched i.e.
   614                                                   ``land_fraction`` is the fraction of the entire globe which was considered to
   615                                                   be land, ``land_fraction_northern_hemisphere`` is the fraction of the Northern
   616                                                   Hemisphere which was considered to be land and
   617                                                   ``land_fraction_southern_hemisphere`` is the fraction of the Southern
   618                                                   Hemisphere which was considered to be land.
   619                                           
   620                                                   Parameters
   621                                                   ----------
   622                                                   sftlf_cube : :obj:`SCMCube`, optional
   623                                                       land surface fraction data which is used to determine whether a given
   624                                                       gridbox is land or ocean. If ``None``, we try to load the land surface fraction automatically.
   625                                           
   626                                                   land_mask_threshold : float, optional
   627                                                       if the surface land fraction in a grid box is greater than
   628                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   629                                           
   630                                                   areacella_scmcube : :obj:`SCMCube`, optional
   631                                                       cell area data which is used to take the latitude-longitude mean of the
   632                                                       cube's data. If ``None``, we try to load this data automatically and if
   633                                                       that fails we fall back onto ``iris.analysis.cartography.area_weights``.
   634                                           
   635                                                   masks : list[str]
   636                                                       List of masks to use. If ``None`` then ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   637                                           
   638                                                   Returns
   639                                                   -------
   640                                                   dict
   641                                                       Cubes, with latitude-longitude mean data as appropriate for each of the
   642                                                       SCM relevant regions.
   643                                                   """
   644         5          5.0      1.0      0.0          try:
   645                                                       # Check if two copies of data will fit in memory. If not, everything has
   646                                                       # to be done lazily.
   647         5   13620226.0 2724045.2      5.9              self._make_two_copies_of_data()
   648                                                   except MemoryError:
   649                                                       logger.warning(
   650                                                           "Data won't fit in memory, will process lazily (hence slowly)"
   651                                                       )
   652                                                       data_dir = dirname(self.info["files"][0])
   653                                                       self.__init__()
   654                                                       self.load_data_in_directory(data_dir)
   655                                           
   656         5         30.0      6.0      0.0          masks = masks if masks is not None else DEFAULT_REGIONS
   657         5      27045.0   5409.0      0.0          area_weights = self._get_area_weights(areacella_scmcube=areacella_scmcube)
   658                                           
   659         5          9.0      1.8      0.0          timeseries_cubes = {}
   660         5          5.0      1.0      0.0          areas = {}
   661        50         70.0      1.4      0.0          for m in masks:
   662        45        139.0      3.1      0.0              scm_cube = self.get_scm_cubes(
   663        45         35.0      0.8      0.0                  sftlf_cube=sftlf_cube,
   664        45         46.0      1.0      0.0                  land_mask_threshold=land_mask_threshold,
   665        45    8631955.0 191821.2      3.8                  masks=[m],
   666        45      27481.0    610.7      0.0              )[m]
   667                                           
   668        45        118.0      2.6      0.0              if m in _LAND_FRACTION_REGIONS:
   669        30      15693.0    523.1      0.0                  areas[m] = self._get_area(scm_cube, area_weights)
   670                                           
   671        45  207353342.0 4607852.0     90.3              timeseries_cubes[m] = take_lat_lon_mean(scm_cube, area_weights)
   672                                           
   673         5      26379.0   5275.8      0.0          timeseries_cubes = self._add_land_fraction(timeseries_cubes, areas)
   674         5          6.0      1.2      0.0          return timeseries_cubes

Total time: 13.62 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _make_two_copies_of_data at line 676

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   676                                               @profile
   677                                               def _make_two_copies_of_data(self):
   678         5   11097570.0 2219514.0     81.5          self._ensure_data_realised()
   679         5    2522477.0 504495.4     18.5          np.copy(self.cube.data)  # pylint:disable=pointless-statement

Total time: 8.62853 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_cubes at line 724

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   724                                               @profile
   725                                               def get_scm_cubes(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   726                                                   """
   727                                                   Get SCM relevant cubes from the ``self``.
   728                                           
   729                                                   Each cube comes with extra information in its ``attributes`` property. The
   730                                                   extra information comprises of crunching information (e.g. the
   731                                                   land_mask_treshold, netcdf_scm_version and source files used to generate the
   732                                                   cube) and SCM timeseries metadata (e.g. scenario, climate_model,
   733                                                   standard_variable_name).
   734                                           
   735                                                   In particular, the timeseries'
   736                                                   `CMOR name <https://www.earthsystemcog.org/projects/wip/CMIP6DataRequest>`_
   737                                                   (see `here <http://clipc-services.ceda.ac.uk/dreq/mipVars.html>`_ for more
   738                                                   details) is put in the ``variable`` attribute whilst the timeseries` 'standard name' (see
   739                                                   `CF documentation <http://cfconventions.org/Data/cf-standard-names/66/build/cf-standard-name-table.html>`_
   740                                                   ) is put in the ``variable_standard_name`` attribute.
   741                                           
   742                                                   Parameters
   743                                                   ----------
   744                                                   sftlf_cube : :obj:`SCMCube`, optional
   745                                                       Land surface fraction data which is used to determine whether a given
   746                                                       gridbox is land or ocean. If ``None``, we try to load the land surface fraction automatically.
   747                                           
   748                                                   land_mask_threshold : float, optional
   749                                                       If the surface land fraction in a grid box is greater than
   750                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   751                                           
   752                                                   masks : list[str]
   753                                                       List of masks to use. If ``None`` then ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   754                                           
   755                                                   Returns
   756                                                   -------
   757                                                   dict
   758                                                       Cubes, with data masked as appropriate for each of the SCM relevant
   759                                                       regions.
   760                                                   """
   761        45        118.0      2.6      0.0          scm_masks = self._get_scm_masks(
   762        45    8513719.0 189193.8     98.7              sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold, masks=masks
   763                                                   )
   764                                                   # ensure data is realised so it's not read multiple times while applying
   765                                                   # masks
   766        45        672.0     14.9      0.0          self._ensure_data_realised()
   767                                           
   768        45     109069.0   2423.8      1.3          cubes = {k: apply_mask(self, mask) for k, mask in scm_masks.items()}
   769                                                   has_root_dir = (
   770        45        133.0      3.0      0.0              hasattr(self, "root_dir")  # pylint:disable=no-member
   771        45        101.0      2.2      0.0              and self.root_dir is not None  # pylint:disable=no-member
   772                                                   )
   773        45        109.0      2.4      0.0          if has_root_dir:
   774        45        105.0      2.3      0.0              source_file_info = "Files: {}".format(
   775                                                           [
   776        45        102.0      2.3      0.0                      p.replace(self.root_dir, "")  # pylint:disable=no-member
   777        45       1112.0     24.7      0.0                      for p in self.info["files"]
   778                                                           ]
   779                                                       )
   780                                                   else:
   781                                                       source_file_info = "Files: {}".format(
   782                                                           [basename(p) for p in self.info["files"]]
   783                                                       )
   784        45        176.0      3.9      0.0          if "metadata" in self.info:
   785                                                       source_meta = {}
   786                                                       for k, v in self.info["metadata"].items():
   787                                                           if has_root_dir:
   788                                                               source_meta[k] = [
   789                                                                   "{}".format(
   790                                                                       p.replace(self.root_dir, "")  # pylint:disable=no-member
   791                                                                   )
   792                                                                   for p in v["files"]
   793                                                               ]
   794                                                           else:
   795                                                               source_meta[k] = ["{}".format(basename(p)) for p in v["files"]]
   796                                                       source_file_info = "; ".join(
   797                                                           [source_file_info]
   798                                                           + ["{}: {}".format(k, v) for k, v in source_meta.items()]
   799                                                       )
   800                                           
   801        90        234.0      2.6      0.0          for region, c in cubes.items():
   802        45        246.0      5.5      0.0              c.cube.attributes["crunch_land_mask_threshold"] = land_mask_threshold
   803                                                       c.cube.attributes[
   804                                                           "crunch_netcdf_scm_version"
   805        45        259.0      5.8      0.0              ] = "{} (more info at github.com/znicholls/netcdf-scm)".format(__version__)
   806        45        184.0      4.1      0.0              c.cube.attributes["crunch_source_files"] = source_file_info
   807        45        176.0      3.9      0.0              c.cube.attributes["region"] = region
   808        45       1935.0     43.0      0.0              c.cube.attributes.update(self._get_scm_timeseries_ids())
   809                                           
   810        45         84.0      1.9      0.0          return cubes

Total time: 8.494 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _get_scm_masks at line 812

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   812                                               @profile
   813                                               def _get_scm_masks(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   814                                                   """
   815                                                   Get the scm masks.
   816                                           
   817                                                   Returns
   818                                                   -------
   819                                                   dict
   820                                                       Dictionary of region name-mask key-value pairs
   821                                                   """
   822        45         59.0      1.3      0.0          masker = CubeMasker(
   823        45        302.0      6.7      0.0              self, sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold
   824                                                   )
   825        45         35.0      0.8      0.0          masks = masks if masks is not None else DEFAULT_REGIONS
   826        45    8493603.0 188746.7    100.0          return masker.get_masks(masks)

Total time: 207.352 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/utils.py
Function: take_lat_lon_mean at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def take_lat_lon_mean(in_scmcube, in_weights):
    98                                               """
    99                                               Take the latitude longitude mean of a cube with given weights
   100                                           
   101                                               Parameters
   102                                               ----------
   103                                               in_scmcube : :obj:`SCMCube`
   104                                                   An ``SCMCube`` instance.
   105                                           
   106                                               in_weights : np.ndarray
   107                                                   Weights to use when taking the mean. If you don't have another source, these
   108                                                   can be generated using
   109                                                   ``iris.analysis.cartography.area_weights(iris_cube_instance)``
   110                                           
   111                                               Returns
   112                                               -------
   113                                               :obj:`SCMCube`
   114                                                   A copy of the input cube in which the data is now the latitude-longitude mean
   115                                                   of the input cube's data
   116                                               """
   117        45        170.0      3.8      0.0      out_cube = type(in_scmcube)()
   118        45         55.0      1.2      0.0      out_cube.cube = in_scmcube.cube.collapsed(
   119        45         57.0      1.3      0.0          [in_scmcube.lat_name, in_scmcube.lon_name],
   120        45         75.0      1.7      0.0          iris.analysis.MEAN,
   121        45  207351747.0 4607816.6    100.0          weights=in_weights,
   122                                               )
   123        45        149.0      3.3      0.0      return out_cube

Total time: 0.107939 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/utils.py
Function: apply_mask at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                           @profile
   126                                           def apply_mask(in_scmcube, in_mask):
   127                                               """
   128                                               Apply a mask to an scm cube's data
   129                                           
   130                                               Parameters
   131                                               ----------
   132                                               in_scmcube : :obj:`SCMCube`
   133                                                   An ``SCMCube`` instance.
   134                                           
   135                                               in_mask : np.ndarray
   136                                                   The mask to apply
   137                                           
   138                                               Returns
   139                                               -------
   140                                               :obj:`SCMCube`
   141                                                   A copy of the input cube with the mask applied to its data
   142                                               """
   143        45        456.0     10.1      0.4      out_cube = type(in_scmcube)()
   144        45         87.0      1.9      0.1      if in_scmcube.cube.has_lazy_data():
   145                                                   new_data = da.ma.masked_array(data=in_scmcube.cube.lazy_data(), mask=in_mask)
   146                                               else:
   147        45       6925.0    153.9      6.4          new_data = ma.masked_array(in_scmcube.cube.data, mask=in_mask)
   148        45     100417.0   2231.5     93.0      out_cube.cube = in_scmcube.cube.copy(data=new_data)
   149                                           
   150        45         54.0      1.2      0.1      return out_cube

