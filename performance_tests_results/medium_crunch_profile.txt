Wrote profile results to scratch.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: /Users/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/cli.py
Function: crunch_data at line 87

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    87                                           @click.command(context_settings={"help_option_names": ["-h", "--help"]})
    88                                           @click.argument("src", type=click.Path(exists=True, readable=True, resolve_path=True))
    89                                           @click.argument(
    90                                               "dst", type=click.Path(file_okay=False, writable=True, resolve_path=True)
    91                                           )
    92                                           @click.argument("crunch_contact")
    93                                           @click.option(
    94                                               "--drs",
    95                                               default="Scm",
    96                                               type=click.Choice(["Scm", "MarbleCMIP5", "CMIP6Input4MIPs", "CMIP6Output"]),
    97                                               show_default=True,
    98                                               help="Data reference syntax to use for crunching.",
    99                                           )
   100                                           @click.option(
   101                                               "--regexp",
   102                                               default="^((?!fx).)*$",
   103                                               show_default=True,
   104                                               help="Regular expression to apply to file directory (only crunches matches).",
   105                                           )
   106                                           @click.option(
   107                                               "--land-mask-threshold",
   108                                               default=50.0,
   109                                               show_default=True,
   110                                               help="Minimum land fraction for a box to be considered land.",
   111                                           )
   112                                           @click.option(
   113                                               "--data-sub-dir",
   114                                               default="netcdf-scm-crunched",
   115                                               show_default=True,
   116                                               help="Sub-directory of ``dst`` to save data in.",
   117                                           )
   118                                           @click.option(
   119                                               "--force/--do-not-force",  # pylint:disable=too-many-arguments
   120                                               "-f",
   121                                               help="Overwrite any existing files.",
   122                                               default=False,
   123                                               show_default=True,
   124                                           )
   125                                           @click.option(
   126                                               "--small-number-workers",  # pylint:disable=too-many-arguments
   127                                               default=10,
   128                                               show_default=True,
   129                                               help="Maximum number of workers to use when crunching files.",
   130                                           )
   131                                           @click.option(
   132                                               "--small-threshold",  # pylint:disable=too-many-arguments
   133                                               default=300,
   134                                               show_default=True,
   135                                               help="Maximum number of years in a file for it to be processed in parallel with ``small-number-workers``",
   136                                           )
   137                                           @click.option(
   138                                               "--medium-number-workers",
   139                                               default=3,  # pylint:disable=too-many-arguments,too-many-locals,too-many-statements
   140                                               show_default=True,
   141                                               help="Maximum number of workers to use when crunching files.",
   142                                           )
   143                                           @click.option(
   144                                               "--medium-threshold",  # pylint:disable=too-many-arguments
   145                                               default=900,
   146                                               show_default=True,
   147                                               help="Maximum number of years in a file for it to be processed in parallel with ``medium-number-workers``",
   148                                           )
   149                                           @profile
   150                                           def crunch_data(
   151                                               src,
   152                                               dst,
   153                                               crunch_contact,
   154                                               drs,
   155                                               regexp,
   156                                               land_mask_threshold,
   157                                               data_sub_dir,
   158                                               force,
   159                                               small_number_workers,
   160                                               small_threshold,
   161                                               medium_number_workers,
   162                                               medium_threshold,
   163                                           ):
   164                                               r"""
   165                                               Crunch data in ``src`` to NetCDF-SCM ``.nc`` files in ``dst``.
   166                                           
   167                                               ``src`` is searched recursively and netcdf-scm will attempt to crunch all the files
   168                                               found. The directory structure in ``src`` will be mirrored in ``dst``.
   169                                           
   170                                               Failures and warnings are recorded and written into a text file in ``dst``. We
   171                                               recommend examining this file using a file analysis tool such as ``grep``. We
   172                                               often use the command ``grep "\|WARNING\|INFO\|ERROR <log-file>``.
   173                                           
   174                                               ``crunch_contact`` is written into the output ``.nc`` files' ``crunch_contact``
   175                                               attribute.
   176                                               """
   177                                               output_prefix = "netcdf-scm"
   178                                               separator = "_"
   179                                               out_dir = os.path.join(dst, data_sub_dir)
   180                                           
   181                                               log_file = os.path.join(
   182                                                   out_dir,
   183                                                   "{}-crunch.log".format(_get_timestamp().replace(" ", "_").replace(":", "")),
   184                                               )
   185                                               _make_path_if_not_exists(out_dir)
   186                                               init_logging(
   187                                                   [
   188                                                       ("crunch-contact", crunch_contact),
   189                                                       ("source", src),
   190                                                       ("destination", out_dir),
   191                                                       ("drs", drs),
   192                                                       ("regexp", regexp),
   193                                                       ("land_mask_threshold", land_mask_threshold),
   194                                                       ("force", force),
   195                                                       ("small_number_workers", small_number_workers),
   196                                                       ("small_threshold", small_threshold),
   197                                                       ("medium_number_workers", medium_number_workers),
   198                                                       ("medium_threshold", medium_threshold),
   199                                                   ],
   200                                                   out_filename=log_file,
   201                                               )
   202                                           
   203                                               tracker = OutputFileDatabase(out_dir)
   204                                               regexp_to_match = re.compile(regexp)
   205                                               helper = _get_scmcube_helper(drs)
   206                                           
   207                                               dirs_to_crunch = []
   208                                               logger.info("Finding directories with files")
   209                                               for dirpath, _, filenames in walk(src):
   210                                                   logger.debug("Entering %s", dirpath)
   211                                                   if filenames:
   212                                                       if not regexp_to_match.match(dirpath):
   213                                                           logger.debug("Skipping (did not match regexp) %s", dirpath)
   214                                                           continue
   215                                                       logger.info("Adding directory to queue %s", dirpath)
   216                                                       helper = _get_scmcube_helper(drs)
   217                                                       try:
   218                                                           helper._add_time_period_from_files_in_directory(  # pylint:disable=protected-access
   219                                                               dirpath
   220                                                           )
   221                                                       except Exception as e:  # pylint:disable=broad-except
   222                                                           logger.debug("Ignoring broken directory %s with error %s", dirpath, e)
   223                                                           continue
   224                                                       time_ids = helper._time_id.split(  # pylint:disable=protected-access
   225                                                           helper.time_period_separator
   226                                                       )
   227                                                       start_year = int(time_ids[0][:4].lstrip("0"))
   228                                                       end_year = int(time_ids[1][:4].lstrip("0"))
   229                                                       num_years = end_year - start_year
   230                                                       dirs_to_crunch.append((dirpath, filenames, num_years))
   231                                           
   232                                               def keep_dir(dpath):
   233                                                   if not regexp_to_match.match(dpath):
   234                                                       logger.debug("Skipping (did not match regexp) %s", dpath)
   235                                                       return False
   236                                                   logger.info("Adding directory to queue %s", dpath)
   237                                                   try:
   238                                                       helper._add_time_period_from_files_in_directory(  # pylint:disable=protected-access
   239                                                           dpath
   240                                                       )
   241                                                   except Exception as e:  # pylint:disable=broad-except
   242                                                       logger.debug("Ignoring broken directory %s with error %s", dpath, e)
   243                                                       return False
   244                                                   return True
   245                                           
   246                                               dirs_to_crunch = _find_dirs_meeting_func(src, keep_dir)
   247                                           
   248                                               def get_nyears(dpath_h):
   249                                                   helper._add_time_period_from_files_in_directory(  # pylint:disable=protected-access
   250                                                       dpath_h
   251                                                   )
   252                                                   time_ids = helper._time_id.split(  # pylint:disable=protected-access
   253                                                       helper.time_period_separator
   254                                                   )
   255                                                   start_year = int(time_ids[0][:4].lstrip("0"))
   256                                                   end_year = int(time_ids[1][:4].lstrip("0"))
   257                                                   num_years = end_year - start_year
   258                                           
   259                                                   return num_years
   260                                           
   261                                               dirs_to_crunch = [(d, f, get_nyears(d)) for d, f in dirs_to_crunch]
   262                                           
   263                                               crunch_kwargs = {
   264                                                   "drs": drs,
   265                                                   "separator": separator,
   266                                                   "output_prefix": output_prefix,
   267                                                   "out_dir": out_dir,
   268                                                   "force": force,
   269                                                   "existing_files": tracker._data,  # pylint:disable=protected-access
   270                                                   "land_mask_threshold": land_mask_threshold,
   271                                                   "crunch_contact": crunch_contact,
   272                                               }
   273                                           
   274                                               def process_results(res):
   275                                                   if res is None:
   276                                                       return  # skipped crunching
   277                                                   scm_timeseries_cubes, out_filepath, info = res
   278                                                   logger.info("Registering %s", out_filepath)
   279                                                   tracker.register(out_filepath, info)
   280                                                   logger.info("Writing file to %s", out_filepath)
   281                                                   save_netcdf_scm_nc(scm_timeseries_cubes, out_filepath)
   282                                           
   283                                               def crunch_from_list(crunch_list, n_workers=1):
   284                                                   return _apply_func(
   285                                                       _crunch_files,
   286                                                       crunch_list,
   287                                                       common_kwarglist=crunch_kwargs,
   288                                                       postprocess_func=process_results,
   289                                                       n_workers=n_workers,
   290                                                       style="processes",
   291                                                   )
   292                                           
   293                                               failures_small = False
   294                                               dirs_to_crunch_small = [
   295                                                   {"fnames": f, "dpath": d} for d, f, n in dirs_to_crunch if n < small_threshold
   296                                               ]
   297                                               logger.info(
   298                                                   "Crunching %s directories with less than %s years of data",
   299                                                   len(dirs_to_crunch_small),
   300                                                   small_threshold,
   301                                               )
   302                                               if dirs_to_crunch_small:
   303                                                   failures_small = crunch_from_list(
   304                                                       dirs_to_crunch_small, n_workers=small_number_workers
   305                                                   )
   306                                           
   307                                               failures_medium = False
   308                                               dirs_to_crunch_medium = [
   309                                                   {"fnames": f, "dpath": d}
   310                                                   for d, f, n in dirs_to_crunch
   311                                                   if small_threshold <= n < medium_threshold
   312                                               ]
   313                                               logger.info(
   314                                                   "Crunching %s directories with greater than or equal to %s and less than %s years of data",
   315                                                   len(dirs_to_crunch_medium),
   316                                                   small_threshold,
   317                                                   medium_threshold,
   318                                               )
   319                                               if dirs_to_crunch_medium:
   320                                                   failures_medium = crunch_from_list(
   321                                                       dirs_to_crunch_medium, n_workers=medium_number_workers
   322                                                   )
   323                                           
   324                                               failures_large = False
   325                                               dirs_to_crunch_large = [
   326                                                   {"fnames": f, "dpath": d} for d, f, n in dirs_to_crunch if n > medium_threshold
   327                                               ]
   328                                               logger.info(
   329                                                   "Crunching %s directories with greater than or equal to %s years of data",
   330                                                   len(dirs_to_crunch_large),
   331                                                   medium_threshold,
   332                                               )
   333                                               if dirs_to_crunch_large:
   334                                                   failures_large = crunch_from_list(dirs_to_crunch_large, n_workers=1)
   335                                           
   336                                               if failures_small or failures_medium or failures_large:
   337                                                   raise click.ClickException(
   338                                                       "Some files failed to process. See {} for more details".format(log_file)
   339                                                   )

Total time: 0 s
File: /Users/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_timeseries_cubes at line 619

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   619                                               @profile
   620                                               def get_scm_timeseries_cubes(
   621                                                   self,
   622                                                   sftlf_cube=None,
   623                                                   land_mask_threshold=50,
   624                                                   areacella_scmcube=None,
   625                                                   masks=None,
   626                                               ):
   627                                                   """
   628                                                   Get SCM relevant cubes
   629                                           
   630                                                   If global, Northern Hemisphere and Southern Hemisphere land cubes are
   631                                                   calculated, then three auxillary co-ordinates are also added to each cube:
   632                                                   ``land_fraction``, ``land_fraction_northern_hemisphere`` and
   633                                                   ``land_fraction_southern_hemisphere``. These co-ordinates document the area
   634                                                   fraction that was considered to be land when the cubes were crunched i.e.
   635                                                   ``land_fraction`` is the fraction of the entire globe which was considered to
   636                                                   be land, ``land_fraction_northern_hemisphere`` is the fraction of the Northern
   637                                                   Hemisphere which was considered to be land and
   638                                                   ``land_fraction_southern_hemisphere`` is the fraction of the Southern
   639                                                   Hemisphere which was considered to be land.
   640                                           
   641                                                   Parameters
   642                                                   ----------
   643                                                   sftlf_cube : :obj:`SCMCube`, optional
   644                                                       land surface fraction data which is used to determine whether a given
   645                                                       gridbox is land or ocean. If ``None``, we try to load the land surface
   646                                                       fraction automatically.
   647                                           
   648                                                   land_mask_threshold : float, optional
   649                                                       if the surface land fraction in a grid box is greater than
   650                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   651                                           
   652                                                   areacella_scmcube : :obj:`SCMCube`, optional
   653                                                       cell area data which is used to take the latitude-longitude mean of the
   654                                                       cube's data. If ``None``, we try to load this data automatically and if
   655                                                       that fails we fall back onto ``iris.analysis.cartography.area_weights``.
   656                                           
   657                                                   masks : list[str]
   658                                                       List of masks to use. If ``None`` then
   659                                                       ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   660                                           
   661                                                   Returns
   662                                                   -------
   663                                                   dict
   664                                                       Cubes, with latitude-longitude mean data as appropriate for each of the
   665                                                       SCM relevant regions.
   666                                                   """
   667                                                   masks = masks if masks is not None else DEFAULT_REGIONS
   668                                                   scm_masks = self._get_scm_masks(
   669                                                       sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold, masks=masks
   670                                                   )
   671                                                   area_weights = self._get_area_weights(areacella_scmcube=areacella_scmcube)
   672                                                   @profile
   673                                                   def crunch_timeseries(region, numpy_mask):
   674                                                       scm_cube = self._get_masked_cube_with_metdata(
   675                                                           region, numpy_mask, land_mask_threshold
   676                                                       )
   677                                           
   678                                                       if region in _LAND_FRACTION_REGIONS:
   679                                                           area = self._get_area(scm_cube, area_weights)
   680                                                       else:
   681                                                           area = None
   682                                                       return region, take_lat_lon_mean(scm_cube, area_weights), area
   683                                           
   684                                                   try:
   685                                                       crunch_list = self._crunch_in_memory(crunch_timeseries, scm_masks)
   686                                                   except MemoryError:
   687                                                       logger.warning(
   688                                                           "Data won't fit in memory, will process lazily (hence slowly)"
   689                                                       )
   690                                                       data_dir = dirname(self.info["files"][0])
   691                                                       self.__init__()
   692                                                       self.load_data_in_directory(data_dir)
   693                                                       crunch_list = self._crunch_serial(crunch_timeseries, scm_masks)
   694                                           
   695                                                   timeseries_cubes = {mask: ts_cube for mask, ts_cube, _ in crunch_list}
   696                                                   areas = {mask: area for mask, _, area in crunch_list if area is not None}
   697                                                   timeseries_cubes = self._add_land_fraction(timeseries_cubes, areas)
   698                                                   return timeseries_cubes

Total time: 0 s
File: /Users/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _crunch_in_memory at line 699

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   699                                               @profile
   700                                               def _crunch_in_memory(self, crunch_timeseries, scm_masks):
   701                                                   # crunching in parallel could go here
   702                                                   self._ensure_data_realised()
   703                                                   logger.debug("Crunching SCM timeseries in memory")
   704                                                   return self._crunch_serial(crunch_timeseries, scm_masks)

Total time: 0 s
File: /Users/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _get_scm_masks at line 848

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   848                                               @profile
   849                                               def _get_scm_masks(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   850                                                   """
   851                                                   Get the scm masks.
   852                                           
   853                                                   Returns
   854                                                   -------
   855                                                   dict
   856                                                       Dictionary of region name-mask key-value pairs
   857                                                   """
   858                                                   if self._masker is None:
   859                                                       self._masker = CubeMasker(
   860                                                           self, sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold
   861                                                       )
   862                                                   masks = masks if masks is not None else DEFAULT_REGIONS
   863                                                   return self._masker.get_masks(masks)

Total time: 0 s
File: /Users/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/masks/__init__.py
Function: get_land_mask at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                           @profile
   120                                           def get_land_mask(  # pylint:disable=unused-argument
   121                                               masker, cube, sftlf_cube=None, land_mask_threshold=50, **kwargs
   122                                           ):
   123                                               """
   124                                               Get the land mask
   125                                           
   126                                               Parameters
   127                                               ----------
   128                                               masker : :obj:`CubeMasker`
   129                                                   Cube masker from which to retrieve the mask
   130                                           
   131                                               cube : :obj:`SCMCube`
   132                                                   Cube to create a mask for
   133                                           
   134                                               sftlf_cube : :obj:`SCMCube`
   135                                                   Cube containing the surface land-fraction data
   136                                           
   137                                               land_mask_threshold : float
   138                                                   Threshold for determining whether a cell is land or not. If the surface
   139                                                   land-fraction > land_mask_threshold, the cell is land.
   140                                           
   141                                               kwargs : Any
   142                                                   Ignored (required for compatibility with ``CubeMasker``)
   143                                           
   144                                               Returns
   145                                               -------
   146                                               np.ndarray
   147                                                   Land mask
   148                                               """
   149                                               sftlf_data = None
   150                                               try:
   151                                                   sftlf_cube = cube.get_metadata_cube(cube.sftlf_var, cube=sftlf_cube)
   152                                                   sftlf_data = sftlf_cube.cube.data
   153                                               except OSError:
   154                                                   warn_msg = (
   155                                                       "Land surface fraction (sftlf) data not available, using default instead"
   156                                                   )
   157                                                   logger.warning(warn_msg)
   158                                                   try:
   159                                                       def_cube_regridded = get_default_sftlf_cube().regrid(
   160                                                           cube.cube, iris.analysis.AreaWeighted()
   161                                                       )
   162                                                   except ValueError:
   163                                                       logger.warning("Guessing bounds to regrid default sftlf data")
   164                                                       cube.cube.coord("latitude").guess_bounds()
   165                                                       cube.cube.coord("longitude").guess_bounds()
   166                                                       def_cube_regridded = get_default_sftlf_cube().regrid(
   167                                                           cube.cube, iris.analysis.AreaWeighted()
   168                                                       )
   169                                           
   170                                                   sftlf_data = def_cube_regridded.data
   171                                           
   172                                               land_mask = np.where(
   173                                                   sftlf_data > land_mask_threshold,
   174                                                   False,  # where it's land, return False i.e. don't mask
   175                                                   True,  # otherwise True
   176                                               )
   177                                           
   178                                               masker._masks["World|Land"] = land_mask  # pylint:disable=protected-access
   179                                               return broadcast_onto_lat_lon_grid(cube, land_mask)

Total time: 0 s
File: /Users/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/masks/__init__.py
Function: get_mask at line 417

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   417                                               @profile
   418                                               def get_mask(self, mask_name):
   419                                                   """
   420                                                   Get a single mask
   421                                           
   422                                                   If the mask has previously been calculated the precalculated result is
   423                                                   returned from the cache. Otherwise the appropriate MaskFunc is called with any
   424                                                   kwargs specified in the constructor.
   425                                           
   426                                                   Parameters
   427                                                   ----------
   428                                                   mask_name : str
   429                                           
   430                                                   Raises
   431                                                   ------
   432                                                   InvalidMask
   433                                                       If the requested mask cannot be found or evaluated
   434                                           
   435                                                   ValueError
   436                                                       If the cube has no data which matches the input mask
   437                                           
   438                                                   Returns
   439                                                   -------
   440                                                   ndarray[bool]
   441                                                       Any True values should be masked out and excluded from any further calculation.
   442                                                   """
   443                                                   try:
   444                                                       return self._masks[mask_name]
   445                                                   except KeyError:
   446                                                       try:
   447                                                           mask_func = MASKS[mask_name]
   448                                                           mask = mask_func(self, self.cube, **self.kwargs)
   449                                                           if len(mask.shape) == 2:
   450                                                               # ensure mask can be used directly on cube
   451                                                               mask = broadcast_to_shape(
   452                                                                   mask,
   453                                                                   self.cube.cube.shape,
   454                                                                   [self.cube.lat_dim_number, self.cube.lon_dim_number],
   455                                                               )
   456                                                           self._masks[mask_name] = mask
   457                                                       except KeyError:
   458                                                           raise InvalidMask("Unknown mask: {}".format(mask_name))
   459                                           
   460                                                   if mask.all():
   461                                                       raise ValueError(
   462                                                           "Your cube has no data which matches the `{}` mask".format(mask_name)
   463                                                       )
   464                                           
   465                                                   return mask

Traceback (most recent call last):
  File "/Users/znicholls/.local/bin/kernprof", line 10, in <module>
    sys.exit(main())
  File "/Users/znicholls/.local/lib/python3.7/site-packages/kernprof.py", line 222, in main
    execfile(script_file, ns, ns)
  File "/Users/znicholls/.local/lib/python3.7/site-packages/kernprof.py", line 35, in execfile
    exec_(compile(f.read(), filename, 'exec'), globals, locals)
  File "scripts/scratch.py", line 32, in <module>
    assert result.exit_code == 0, result.output
AssertionError: Usage: crunch-data [OPTIONS] SRC DST CRUNCH_CONTACT
Try "crunch-data -h" for help.

Error: Invalid value for "SRC": Path "/data/marble/cmip6/CMIP6/CMIP/BCC/BCC-CSM2-MR/historical/r1i1p1f1/Amon/tas/gn/v20181126" does not exist.

