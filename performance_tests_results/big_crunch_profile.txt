Start: 2019-07-16 03:16:55.038473
End: 2019-07-16 03:20:43.458890
Diff: 228.420417
Wrote profile results to scratch.py.lprof
Timer unit: 1e-06 s

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_timeseries_cubes at line 601

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   601                                               @profile
   602                                               def get_scm_timeseries_cubes(
   603                                                   self,
   604                                                   sftlf_cube=None,
   605                                                   land_mask_threshold=50,
   606                                                   areacella_scmcube=None,
   607                                                   masks=None,
   608                                               ):
   609                                                   """
   610                                                   Get SCM relevant cubes
   611                                           
   612                                                   If global, Northern Hemisphere and Southern Hemisphere land cubes are
   613                                                   calculated, then three auxillary co-ordinates are also added to each cube:
   614                                                   ``land_fraction``, ``land_fraction_northern_hemisphere`` and
   615                                                   ``land_fraction_southern_hemisphere``. These co-ordinates document the area
   616                                                   fraction that was considered to be land when the cubes were crunched i.e.
   617                                                   ``land_fraction`` is the fraction of the entire globe which was considered to
   618                                                   be land, ``land_fraction_northern_hemisphere`` is the fraction of the Northern
   619                                                   Hemisphere which was considered to be land and
   620                                                   ``land_fraction_southern_hemisphere`` is the fraction of the Southern
   621                                                   Hemisphere which was considered to be land.
   622                                           
   623                                                   Parameters
   624                                                   ----------
   625                                                   sftlf_cube : :obj:`SCMCube`, optional
   626                                                       land surface fraction data which is used to determine whether a given
   627                                                       gridbox is land or ocean. If ``None``, we try to load the land surface
   628                                                       fraction automatically.
   629                                           
   630                                                   land_mask_threshold : float, optional
   631                                                       if the surface land fraction in a grid box is greater than
   632                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   633                                           
   634                                                   areacella_scmcube : :obj:`SCMCube`, optional
   635                                                       cell area data which is used to take the latitude-longitude mean of the
   636                                                       cube's data. If ``None``, we try to load this data automatically and if
   637                                                       that fails we fall back onto ``iris.analysis.cartography.area_weights``.
   638                                           
   639                                                   masks : list[str]
   640                                                       List of masks to use. If ``None`` then
   641                                                       ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   642                                           
   643                                                   Returns
   644                                                   -------
   645                                                   dict
   646                                                       Cubes, with latitude-longitude mean data as appropriate for each of the
   647                                                       SCM relevant regions.
   648                                                   """
   649                                                   masks = masks if masks is not None else DEFAULT_REGIONS
   650                                                   scm_masks = self._get_scm_masks(
   651                                                       sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold, masks=masks
   652                                                   )
   653                                                   area_weights = self._get_area_weights(areacella_scmcube=areacella_scmcube)
   654                                           
   655                                                   def crunch_timeseries(region, numpy_mask):
   656                                                       scm_cube = self._get_masked_cube_with_metdata(
   657                                                           region, numpy_mask, land_mask_threshold
   658                                                       )
   659                                           
   660                                                       if region in _LAND_FRACTION_REGIONS:
   661                                                           area = self._get_area(scm_cube, area_weights)
   662                                                       else:
   663                                                           area = None
   664                                                       return region, take_lat_lon_mean(scm_cube, area_weights), area
   665                                           
   666                                                   try:
   667                                                       self._ensure_data_realised()
   668                                                       logger.debug("Crunching SCM timeseries serially")
   669                                                       crunch_list = self._crunch_serial(crunch_timeseries, scm_masks)
   670                                                       # crunching in parallel could go here
   671                                                   except MemoryError:
   672                                                       logger.warning(
   673                                                           "Data won't fit in memory, will process lazily (hence slowly)"
   674                                                       )
   675                                                       data_dir = dirname(self.info["files"][0])
   676                                                       self.__init__()
   677                                                       self.load_data_in_directory(data_dir)
   678                                                       crunch_list = self._crunch_serial(crunch_timeseries, scm_masks)
   679                                           
   680                                                   timeseries_cubes = {mask: ts_cube for mask, ts_cube, _ in crunch_list}
   681                                                   areas = {mask: area for mask, _, area in crunch_list if area is not None}
   682                                                   timeseries_cubes = self._add_land_fraction(timeseries_cubes, areas)
   683                                                   return timeseries_cubes

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_scm_cubes at line 731

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   731                                               @profile
   732                                               def get_scm_cubes(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   733                                                   """
   734                                                   Get SCM relevant cubes from the ``self``.
   735                                           
   736                                                   Each cube comes with extra information in its ``attributes`` property. The
   737                                                   extra information comprises of crunching information (e.g. the
   738                                                   land_mask_treshold, netcdf_scm_version and source files used to generate the
   739                                                   cube) and SCM timeseries metadata (e.g. scenario, climate_model,
   740                                                   standard_variable_name).
   741                                           
   742                                                   In particular, the timeseries'
   743                                                   `CMOR name <https://www.earthsystemcog.org/projects/wip/CMIP6DataRequest>`_
   744                                                   (see `here <http://clipc-services.ceda.ac.uk/dreq/mipVars.html>`_ for more
   745                                                   details) is put in the ``variable`` attribute whilst the timeseries` 'standard name' (see
   746                                                   `CF documentation <http://cfconventions.org/Data/cf-standard-names/66/build/cf-standard-name-table.html>`_
   747                                                   ) is put in the ``variable_standard_name`` attribute.
   748                                           
   749                                                   Parameters
   750                                                   ----------
   751                                                   sftlf_cube : :obj:`SCMCube`, optional
   752                                                       Land surface fraction data which is used to determine whether a given
   753                                                       gridbox is land or ocean. If ``None``, we try to load the land surface fraction automatically.
   754                                           
   755                                                   land_mask_threshold : float, optional
   756                                                       If the surface land fraction in a grid box is greater than
   757                                                       ``land_mask_threshold``, it is considered to be a land grid box.
   758                                           
   759                                                   masks : list[str]
   760                                                       List of masks to use. If ``None`` then ``netcdf_scm.masks.DEFAULT_REGIONS`` is used.
   761                                           
   762                                                   Returns
   763                                                   -------
   764                                                   dict
   765                                                       Cubes, with data masked as appropriate for each of the SCM relevant
   766                                                       regions.
   767                                                   """
   768                                                   scm_masks = self._get_scm_masks(
   769                                                       sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold, masks=masks
   770                                                   )
   771                                           
   772                                                   # ensure data is realised so it's not read multiple times while applying
   773                                                   # masks
   774                                                   self._ensure_data_realised()
   775                                           
   776                                                   cubes = {
   777                                                       k: self._get_masked_cube_with_metdata(k, mask, land_mask_threshold)
   778                                                       for k, mask in scm_masks.items()
   779                                                   }
   780                                           
   781                                                   return cubes

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: _get_scm_masks at line 827

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   827                                               @profile
   828                                               def _get_scm_masks(self, sftlf_cube=None, land_mask_threshold=50, masks=None):
   829                                                   """
   830                                                   Get the scm masks.
   831                                           
   832                                                   Returns
   833                                                   -------
   834                                                   dict
   835                                                       Dictionary of region name-mask key-value pairs
   836                                                   """
   837                                                   if self._masker is None:
   838                                                       self._masker = CubeMasker(
   839                                                           self, sftlf_cube=sftlf_cube, land_mask_threshold=land_mask_threshold
   840                                                       )
   841                                                   masks = masks if masks is not None else DEFAULT_REGIONS
   842                                                   return self._masker.get_masks(masks)

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/iris_cube_wrappers.py
Function: get_metadata_cube at line 1184

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1184                                               @profile
  1185                                               def get_metadata_cube(self, metadata_variable, cube=None):
  1186                                                   """
  1187                                                   Load a metadata cube from self's attributes.
  1188                                           
  1189                                                   Parameters
  1190                                                   ----------
  1191                                                   metadata_variable : str
  1192                                                       the name of the metadata variable to get, as it appears in the filename.
  1193                                           
  1194                                                   cube : :obj:`SCMCube`
  1195                                                       Optionally, pass in an already loaded metadata cube to link it to currently loaded cube
  1196                                           
  1197                                                   Returns
  1198                                                   -------
  1199                                                   type(self)
  1200                                                       instance of self which has been loaded from the file containing the metadata variable of interest.
  1201                                           
  1202                                                   Raises
  1203                                                   ------
  1204                                                   TypeError
  1205                                                       ``cube`` is not an :obj:`ScmCube`
  1206                                                   """
  1207                                                   if cube is not None:
  1208                                                       return super().get_metadata_cube(metadata_variable, cube=cube)
  1209                                                   if metadata_variable not in self._metadata_cubes:
  1210                                                       load_args = self._get_metadata_load_arguments(metadata_variable)
  1211                                           
  1212                                                       cube = type(self)()
  1213                                                       cube._metadata_cubes = {k: v for k, v in self._metadata_cubes.items() if k != metadata_variable}
  1214                                                       cube.load_data_from_identifiers(**load_args)
  1215                                           
  1216                                                       return super().get_metadata_cube(metadata_variable, cube=cube)
  1217                                                   return super().get_metadata_cube(metadata_variable)

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/masks/__init__.py
Function: get_land_mask at line 117

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   117                                           @profile
   118                                           def get_land_mask(  # pylint:disable=unused-argument
   119                                               masker, cube, sftlf_cube=None, land_mask_threshold=50, **kwargs
   120                                           ):
   121                                               """
   122                                               Get the land mask
   123                                           
   124                                               Parameters
   125                                               ----------
   126                                               masker : :obj:`CubeMasker`
   127                                                   Cube masker from which to retrieve the mask
   128                                           
   129                                               cube : :obj:`SCMCube`
   130                                                   Cube to create a mask for
   131                                           
   132                                               sftlf_cube : :obj:`SCMCube`
   133                                                   Cube containing the surface land-fraction data
   134                                           
   135                                               land_mask_threshold : float
   136                                                   Threshold for determining whether a cell is land or not. If the surface
   137                                                   land-fraction > land_mask_threshold, the cell is land.
   138                                           
   139                                               kwargs : Any
   140                                                   Ignored (required for compatibility with ``CubeMasker``)
   141                                           
   142                                               Returns
   143                                               -------
   144                                               np.ndarray
   145                                                   Land mask
   146                                               """
   147                                               sftlf_data = None
   148                                               try:
   149                                                   sftlf_cube = cube.get_metadata_cube(cube.sftlf_var, cube=sftlf_cube)
   150                                                   sftlf_data = sftlf_cube.cube.data
   151                                               except OSError:
   152                                                   warn_msg = "Land surface fraction (sftlf) data not available, using default instead"
   153                                                   logger.warning(warn_msg)
   154                                                   def_cube_regridded = get_default_sftlf_cube().regrid(
   155                                                       cube.cube, iris.analysis.Linear()
   156                                                   )
   157                                                   sftlf_data = def_cube_regridded.data
   158                                           
   159                                               land_mask = np.where(
   160                                                   sftlf_data > land_mask_threshold,
   161                                                   False,  # where it's land, return False i.e. don't mask
   162                                                   True,  # otherwise True
   163                                               )
   164                                           
   165                                               masker._masks["World|Land"] = land_mask
   166                                               return broadcast_onto_lat_lon_grid(cube, land_mask)

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/masks/__init__.py
Function: get_mask at line 367

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   367                                               @profile
   368                                               def get_mask(self, mask_name):
   369                                                   """
   370                                                   Get a single mask
   371                                           
   372                                                   If the mask has previously been calculated the precalculated result is
   373                                                   returned from the cache. Otherwise the appropriate MaskFunc is called with any
   374                                                   kwargs specified in the constructor.
   375                                           
   376                                                   Parameters
   377                                                   ----------
   378                                                   mask_name : str
   379                                           
   380                                                   Raises
   381                                                   ------
   382                                                   InvalidMask
   383                                                       If the requested mask cannot be found or evaluated.
   384                                           
   385                                                   Returns
   386                                                   -------
   387                                                   ndarray[bool]
   388                                                       Any True values should be masked out and excluded from any further calculation.
   389                                                   """
   390                                                   try:
   391                                                       return self._masks[mask_name]
   392                                                   except KeyError:
   393                                                       try:
   394                                                           mask_func = MASKS[mask_name]
   395                                                           mask = mask_func(self, self.cube, **self.kwargs)
   396                                                           self._masks[mask_name] = mask
   397                                                       except KeyError:
   398                                                           raise InvalidMask("Unknown mask: {}".format(mask_name))
   399                                           
   400                                                   return mask

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/utils.py
Function: take_lat_lon_mean at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           @profile
    97                                           def take_lat_lon_mean(in_scmcube, in_weights):
    98                                               """
    99                                               Take the latitude longitude mean of a cube with given weights
   100                                           
   101                                               Parameters
   102                                               ----------
   103                                               in_scmcube : :obj:`SCMCube`
   104                                                   An ``SCMCube`` instance.
   105                                           
   106                                               in_weights : np.ndarray
   107                                                   Weights to use when taking the mean. If you don't have another source, these
   108                                                   can be generated using
   109                                                   ``iris.analysis.cartography.area_weights(iris_cube_instance)``
   110                                           
   111                                               Returns
   112                                               -------
   113                                               :obj:`SCMCube`
   114                                                   A copy of the input cube in which the data is now the latitude-longitude mean
   115                                                   of the input cube's data
   116                                               """
   117                                               out_cube = type(in_scmcube)()
   118                                               out_cube.cube = in_scmcube.cube.collapsed(
   119                                                   [in_scmcube.lat_name, in_scmcube.lon_name],
   120                                                   iris.analysis.MEAN,
   121                                                   weights=in_weights,
   122                                               )
   123                                               return out_cube

Total time: 0 s
File: /home/UNIMELB/znicholls/Documents/AGCEC/Misc/netcdf-scm/src/netcdf_scm/utils.py
Function: apply_mask at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                           @profile
   126                                           def apply_mask(in_scmcube, in_mask):
   127                                               """
   128                                               Apply a mask to an scm cube's data
   129                                           
   130                                               Parameters
   131                                               ----------
   132                                               in_scmcube : :obj:`SCMCube`
   133                                                   An ``SCMCube`` instance.
   134                                           
   135                                               in_mask : np.ndarray
   136                                                   The mask to apply
   137                                           
   138                                               Returns
   139                                               -------
   140                                               :obj:`SCMCube`
   141                                                   A copy of the input cube with the mask applied to its data
   142                                               """
   143                                               out_cube = type(in_scmcube)()
   144                                               if in_scmcube.cube.has_lazy_data():
   145                                                   new_data = da.ma.masked_array(data=in_scmcube.cube.lazy_data(), mask=in_mask)
   146                                               else:
   147                                                   new_data = ma.masked_array(in_scmcube.cube.data, mask=in_mask)
   148                                               out_cube.cube = in_scmcube.cube.copy(data=new_data)
   149                                           
   150                                               return out_cube

